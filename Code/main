Ship ship;
Fleet fleet;
Mothership mothership;

ArrayList<Bullet> bullets = new ArrayList <Bullet>();
ArrayList<Bomb> bombs = new ArrayList <Bomb>();

boolean levelOne = true; 
boolean levelTwo = false;
int score;  
int lives; // num lives of player

// loading images and font
PImage title; 
PImage loading;
PFont customFont;
// winning animation
PImage winning_invader;
float x;
float y;
int step = 15;
boolean reverse = false;

String state;
int startTime = millis();


void setup() {
  size(1000, 800);
  // loading images and fonts
  customFont = createFont("ca.ttf", 32); // loading custom font
  title = loadImage("sprites/title.png");
  loading = loadImage("sprites/loading.jpg");
  winning_invader = loadImage("sprites/winning_inv.png");

  // initialising variables
  x = width/2;
  y = height/3;

  // current game state  
  state = "menu";
}

void draw() {
  background(0);

  if (state.equalsIgnoreCase("menu")) {
    displayMenu();
  }

  if (state.equalsIgnoreCase("loading")) {  
    displayLoading();
  }

  if (state.equalsIgnoreCase("game_over")) {
    gameOver();
  }

  if (state.equalsIgnoreCase("game_won")) {
    gameWon();
  } 

  if (state.equalsIgnoreCase("play")) {    
    if (isGameOver()) {
      state = "game_over";
    } else if (finishedLevel() && levelOne) {
      levelOne = false;
      levelTwo = true;
      initialiseGame(lives, score);
      startTime = millis();
      state = "loading";
    } else if (finishedLevel() && levelTwo) {
      state = "game_won";
    }

    displayInfoBar();
    drawBullets(); // draws the players bullets
    drawBombs(); // draws the dropped bombs

    fleet.display();
    if (frameCount%20 == 0) {
      fleet.dropBomb();
    }

    ship.display();
    ship.move(); // enables ship movement
    ship.shoot(); // enables ship to shoot
    if (frameCount%20 == 0 && levelOne == true) { // level one
      ship.canShoot = true;
    } else if (frameCount%30 == 0 && levelTwo == true) { // level one
      ship.canShoot = true;
    }

    if (mothership != null) {
      mothership.display();
      if (mothership.collide()) {
        mothership.findPerk();
        mothership = null;
      } else if (mothership.outOfWindow()) { // deleting mothership once it has disappeared
        mothership = null;
      }
    }
    if (frameCount%200 == 0) {
      generateMothership();
    }
  }
}

// ------- METHODS FOR PLAYING GAME -------

void displayInfoBar() {
  fill(255);
  rectMode(CORNER);
  rect(0, 0, width, 30);
  textFont(customFont);
  textSize(24);
  textAlign(CORNER);
  fill(0);
  text("Score <" + score + ">", 10, 25);
  text("Lives <" + lives + ">", 240, 25);
}

void drawBullets() { // bullets player fire
  for (int i = 0; i < bullets.size(); i++) {
    Bullet b = bullets.get(i);
    b.display();
    // deleting bullets arraylist once bullet disappears off screen
    if (b.y + b.ht/2 < 0) {
      bullets.remove(i);
    }
  }
}

void drawBombs() { // bombs invaders drop
  for (int i = 0; i < bombs.size(); i++) {
    Bomb b = bombs.get(i);
    b.display();
    // deleting bombs arraylist once bullet disappears off screen
    if (b.y > height) {
      bombs.remove(i);
    }
  }
}

void generateMothership() {
  if (mothership == null) {
    if (Math.random() > 0.6) {
      int perk = (int)(random(5));
      mothership = new Mothership(perk);
    }
  }
}

boolean isGameOver() {
  if (lives < 1) {
    return true;
  }
  return false;
}

boolean finishedLevel() {
  for (int r = 0; r < fleet.invaders.length; r++) {
    for (int c = 0; c < fleet.invaders[0].length; c++) {
      if (fleet.invaders[r][c] != null) {
        return false;
      }
    }
  }
  return true;
}

// ------- INITIALISATION -------

void initialiseGame(int lives, int score) {
  bullets.clear();
  bombs.clear();
  ship = new Ship(width/2);
  fleet = new Fleet();
  fleet.create();
  this.lives = lives;
  this.score = score;
}

// ------- MENU -------

void displayMenu() {
  imageMode(CENTER);
  image(title, width/2, height/4);
  textFont(customFont);
  textAlign(CENTER, CENTER);
  textSize(28);
  text("Controls \nSpace : Shoot\nMove left/right : Arrow Keys", width/2, 3*height/5);
  textSize(45);
  text("PRESS SPACE TO START GAME", width/2, 5*height/6);
}

// ------- LOADING SCREEN --------

void displayLoading() {
  imageMode(CENTER);
  image(loading, width/2, height/2);
  if (millis() > startTime + 2500) {
    state = "play";
    startTime = millis();
  }
}


// ------- GAME OVER SCREEN -------

void gameOver() {
  // sets all objects to null
  ship = null;
  mothership = null;
  fleet = null;

  textSize(100);
  fill(255);
  textAlign(CENTER, CENTER);
  text("Game Over!", width/2, height/2);
  textSize(20);
  text ("Press space to restart", width/2, 2*height/3);
}

// ------- GAME WON SCREEN -------

void gameWon() {
  // winning animation
  textFont(customFont);
  textAlign(CENTER, CENTER);
  textSize(100);
  fill(170, 150, 255);
  text("You Win!", width/2, height/2);
  fill(100, 50, 200);
  textSize(20);
  text ("Press space to restart", width/2, 2*height/3);

  int wd = 200;
  int ht = 200;
  imageMode(CENTER);
  image(winning_invader, x, y, wd, ht);

  if (frameCount%20 == 0) {
    if  (x + wd/2 > width) {
      reverse = true;
    } else if (x - wd/2 < 0) {
      reverse = false;
    }

    if (reverse) {
      x -= step;
    } else {
      x += step;
    }
  }
}
