public class Fleet {
  // map from invader type to points
  HashMap<Integer, Integer> points = new HashMap<Integer, Integer>();
  // 2D array holding invader objects
  Invader[][] invaders;
  int rows = 6; 
  int cols = 12; 
  // starting positions of invaders
  float left;
  int top;
  // speed and dir of fleet
  float speed = 15;
  boolean reverse = false;

  Fleet() {
    invaders = new Invader[rows][cols];
    left = (width-(cols*45))/2 + 5; // x of fleet
    top = 120; // y of fleet
    typeToPoints(); // sets up map
  }

  void create() {
    int wd = 0;
    int ht = 0;
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        if (i == 0 || i == 1) {
          wd = 30;
          ht = 30;
        } else if (i == 2 || i == 3) {
          wd = 40;
          ht = 30;
        } else if (i == 4 || i == 5) {
          wd = 43;
          ht = 35;
        }
        invaders[i][j] = new Invader(i, left + 45*j, top + 50*i, wd, ht);
      }
    }
  }

  void display() {
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {          
        if (invaders[i][j] != null) {
          Invader invader = invaders[i][j];
          // checks if fleet is hitting a wall
          if (!reverse) {
            if (invader.x + invader.wd + invader.invader_speed > width) {
              fleet.reverse = true;
              fleet.reverse();
            }
          } else {
            if (invader.x + invader.invader_speed < 0) {
              fleet.reverse = false;
              fleet.reverse();
            }
          }
          // draws invaders
          invader.display();
          // checks for collisions between bullets and each invader
          if (invader.collideWithBullet()) { 
            score += (points.get(invader.type)); // increments score according to invader type
            invaders[i][j] = null;
          }
          // checks for collision with ship
          if (invader.collideWithShip() || invader.collideWithBot()) {
            lives = 0; // kills you instantly
          }
          // moves invaders every 20 frames
          if (frameCount%20 == 0) {
            invader.move(); // moves invader every 20 framecounts
          }
        }
      }
    }
  }

  void reverse() { // when the invader hits a wall, invaders change direction
    for (int r = 0; r < rows; r++) {
      for (int c = 0; c < cols; c++) {
        if (invaders[r][c] != null) {
          Invader invader = invaders[r][c];
          // moves invaders down
          invader.y += Math.abs(invader.invader_speed); 
          // increments speed of invaders
          if (invader.invader_speed > 0) { // 
            invader.invader_speed += 5;
          } else {
            invader.invader_speed -= 5;
          }
          // changes the direction of every invader
          invader.invader_speed *= -1;
        }
      }
    }
  }

  void dropBomb() {
    int r = (int)(random(rows));
    int c = (int)(random(cols));
    if (invaders[r][c] != null) {
      //if (Math.random() > 0.2) {
      Invader invader = invaders[r][c]; 
      bombs.add(new Bomb(invader.x + invader.wd/2, invader.y + invader.ht));
      //}
    }
  }

  void typeToPoints() {
    // maps invader type to amount of points you get
    points.put(0, 30);
    points.put(1, 30);
    points.put(2, 20);
    points.put(3, 20);
    points.put(4, 10);
    points.put(5, 10);
    points.put(6, 50);
  }
}
